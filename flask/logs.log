2022-11-06 18:18:37,991:INFO:Initializing load_model()
2022-11-06 18:18:37,992:INFO:load_model(model_name=my_best_pipline, platform=None, authentication=None, verbose=True)
2022-11-06 18:20:35,477:INFO:Initializing load_model()
2022-11-06 18:20:35,478:INFO:load_model(model_name=my_best_pipline, platform=None, authentication=None, verbose=True)
2022-11-06 18:24:10,249:INFO:Initializing load_model()
2022-11-06 18:24:10,249:INFO:load_model(model_name=/home/mqasim/Data/NED/PGD Batch2 Machine Learning/flask/Insurance_reg_app/my_best_pipline, platform=None, authentication=None, verbose=True)
2022-11-06 18:24:13,301:INFO:Initializing load_model()
2022-11-06 18:24:13,302:INFO:load_model(model_name=/home/mqasim/Data/NED/PGD Batch2 Machine Learning/flask/Insurance_reg_app/my_best_pipline, platform=None, authentication=None, verbose=True)
2022-11-06 18:24:28,740:INFO:Initializing predict_model()
2022-11-06 18:24:28,740:INFO:predict_model(estimator=Pipeline(steps=[('dtypes',
                 DataTypes_Auto_infer(ml_usecase='regression',
                                      target='charges')),
                ('imputer',
                 Simple_Imputer(categorical_strategy='not_available',
                                fill_value_categorical=None,
                                fill_value_numerical=None,
                                numeric_strategy='mean',
                                target_variable=None)),
                ('new_levels1',
                 New_Catagorical_Levels_in_TestData(replacement_strategy='least '
                                                                         'frequent',
                                                    target=...
                ('binn', 'passthrough'), ('rem_outliers', 'passthrough'),
                ('cluster_all', 'passthrough'),
                ('dummy', Dummify(target='charges')),
                ('fix_perfect', Remove_100(target='charges')),
                ('clean_names', Clean_Colum_Names()),
                ('feature_select', 'passthrough'), ('fix_multi', 'passthrough'),
                ('dfs', 'passthrough'), ('pca', 'passthrough'),
                ['trained_model', GradientBoostingRegressor(random_state=465)]]), probability_threshold=None, encoded_labels=True, raw_score=False, round=4, verbose=True, ml_usecase=MLUsecase.REGRESSION, display=None)
2022-11-06 18:24:28,741:INFO:Checking exceptions
2022-11-06 18:24:28,741:INFO:Preloading libraries
2022-11-06 18:26:56,712:INFO:Initializing load_model()
2022-11-06 18:26:56,712:INFO:load_model(model_name=/home/mqasim/Data/NED/PGD Batch2 Machine Learning/flask/Insurance_reg_app/my_best_pipline, platform=None, authentication=None, verbose=True)
2022-11-06 18:27:01,952:INFO:Initializing predict_model()
2022-11-06 18:27:01,953:INFO:predict_model(estimator=Pipeline(steps=[('dtypes',
                 DataTypes_Auto_infer(ml_usecase='regression',
                                      target='charges')),
                ('imputer',
                 Simple_Imputer(categorical_strategy='not_available',
                                fill_value_categorical=None,
                                fill_value_numerical=None,
                                numeric_strategy='mean',
                                target_variable=None)),
                ('new_levels1',
                 New_Catagorical_Levels_in_TestData(replacement_strategy='least '
                                                                         'frequent',
                                                    target=...
                ('binn', 'passthrough'), ('rem_outliers', 'passthrough'),
                ('cluster_all', 'passthrough'),
                ('dummy', Dummify(target='charges')),
                ('fix_perfect', Remove_100(target='charges')),
                ('clean_names', Clean_Colum_Names()),
                ('feature_select', 'passthrough'), ('fix_multi', 'passthrough'),
                ('dfs', 'passthrough'), ('pca', 'passthrough'),
                ['trained_model', GradientBoostingRegressor(random_state=465)]]), probability_threshold=None, encoded_labels=True, raw_score=False, round=4, verbose=True, ml_usecase=MLUsecase.REGRESSION, display=None)
2022-11-06 18:27:01,953:INFO:Checking exceptions
2022-11-06 18:27:01,953:INFO:Preloading libraries
2022-11-06 18:28:03,069:INFO:Initializing load_model()
2022-11-06 18:28:03,069:INFO:load_model(model_name=/home/mqasim/Data/NED/PGD Batch2 Machine Learning/flask/Insurance_reg_app/my_best_pipline, platform=None, authentication=None, verbose=True)
2022-11-06 18:28:05,569:INFO:Initializing predict_model()
2022-11-06 18:28:05,576:INFO:predict_model(estimator=Pipeline(steps=[('dtypes',
                 DataTypes_Auto_infer(ml_usecase='regression',
                                      target='charges')),
                ('imputer',
                 Simple_Imputer(categorical_strategy='not_available',
                                fill_value_categorical=None,
                                fill_value_numerical=None,
                                numeric_strategy='mean',
                                target_variable=None)),
                ('new_levels1',
                 New_Catagorical_Levels_in_TestData(replacement_strategy='least '
                                                                         'frequent',
                                                    target=...
                ('binn', 'passthrough'), ('rem_outliers', 'passthrough'),
                ('cluster_all', 'passthrough'),
                ('dummy', Dummify(target='charges')),
                ('fix_perfect', Remove_100(target='charges')),
                ('clean_names', Clean_Colum_Names()),
                ('feature_select', 'passthrough'), ('fix_multi', 'passthrough'),
                ('dfs', 'passthrough'), ('pca', 'passthrough'),
                ['trained_model', GradientBoostingRegressor(random_state=465)]]), probability_threshold=None, encoded_labels=True, raw_score=False, round=4, verbose=True, ml_usecase=MLUsecase.REGRESSION, display=None)
2022-11-06 18:28:05,580:INFO:Checking exceptions
2022-11-06 18:28:05,581:INFO:Preloading libraries
